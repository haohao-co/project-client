{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","accounts","contract","tokenURI","tokenIdForBuying","tokenIdForSettingPrice","priceForSettingPrice","items","componentDidMount","request","method","eth","net","getId","networkId","deployedNetwork","NftTradingPlatform","networks","instance","Contract","abi","address","methods","getItems","call","itemsResponse","setState","alert","error","onInit","latestAccounts","on","handleCreateToken","event","createToken","send","from","handleBuy","tokenId","tokenIdInt","parseInt","getTokenPrice","price","buy","value","handleChange","e","target","name","handleSetPrice","priceInt","setTokenPrice","this","className","type","onChange","onClick","bind","border","map","item","index","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.22762df3.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport NftTradingPlatform from \"./contracts/NftTradingPlatform.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nconst zip = (...arr) => Array.from({ length: Math.max(...arr.map(a => a.length)) }, (_, i) => arr.map(a => a[i]))\n\nclass App extends Component {\n  state = {\n    web3: null,\n    accounts: null,\n    contract: null,\n    tokenURI: null,\n    tokenIdForBuying: null,\n    tokenIdForSettingPrice: null,\n    priceForSettingPrice: null,\n    items: [[]]\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // get current metamask account\n      await window.ethereum.enable();\n      const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n\n      const tokenURI = null;\n      const tokenIdForBuying = null;\n      const tokenIdForSettingPrice = null;\n      const priceForSettingPrice = null;\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = NftTradingPlatform.networks[networkId];\n      const instance = new web3.eth.Contract(\n        NftTradingPlatform.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      const itemsResponse = await instance.methods.getItems().call();\n\n      this.setState({ web3, accounts, contract: instance, tokenURI, tokenIdForBuying, tokenIdForSettingPrice, priceForSettingPrice, items: itemsResponse });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  onInit = async () => {\n    await window.ethereum.enable();\n        const latestAccounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n        this.setState({ accounts: latestAccounts})\n         window.ethereum.on('accountsChanged', function (accounts) {\n            // Time to reload interface with accounts[0]!\n            console.log(accounts[0])\n           });\n  }\n\n  handleCreateToken = async event =>{\n    const contract = this.state.contract\n    const accounts = this.state.accounts\n\n    const tokenURI = this.state.tokenURI\n    await contract.methods.createToken(tokenURI).send({ from: accounts[0] });\n\n    const itemsResponse = await contract.methods.getItems().call();\n\n    // Update state with the result.\n    this.setState({ items: itemsResponse });\n  };\n\n  handleBuy = async event => {\n    const contract = this.state.contract\n    const accounts = this.state.accounts\n    const tokenId = this.state.tokenIdForBuying\n    let tokenIdInt  = parseInt(tokenId);\n\n    const price = await contract.methods.getTokenPrice(tokenIdInt).call();\n\n    // Trigger the buy transaction\n    await contract.methods.buy(tokenIdInt).send({ from: accounts[0], value: price });\n\n    const itemsResponse = await contract.methods.getItems().call();\n\n    // Update state with the result.\n    this.setState({ items: itemsResponse });\n  };\n\n  //handle textbox change\n  handleChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n  handleSetPrice = async event => {\n      const tokenId = this.state.tokenIdForSettingPrice;\n      const price = this.state.priceForSettingPrice;\n\n      let tokenIdInt  = parseInt(tokenId);\n      let priceInt = parseInt(price);\n\n      const contract = this.state.contract\n      const accounts = this.state.accounts\n\n      await contract.methods.setTokenPrice(tokenIdInt, priceInt).send({ from: accounts[0] });\n\n      const itemsResponse = await contract.methods.getItems().call();\n\n      // Update state with the result.\n      this.setState({ items: itemsResponse });\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h1>NFT trading</h1>\n          <p>Create token | Set Price | Trade</p>\n        </div>\n        <div className=\"flex-container\">\n          <div className=\"flex-child magenta\">\n            <h2>My tokens</h2>\n            <br/>\n            <label>\n              token uri&nbsp;&nbsp;<input type=\"text\" name=\"tokenURI\" onChange={this.handleChange}/>\n            </label>\n            &nbsp;&nbsp;\n            <button onClick={this.handleCreateToken.bind(this)}>Create Token</button>\n            <br/><br/><br/>\n            \n            <label>\n              token id&nbsp;&nbsp;\n              <input type=\"text\" name=\"tokenIdForSettingPrice\" onChange={this.handleChange}/>\n            </label>\n            <label>\n              &nbsp;&nbsp;\n              price&nbsp;&nbsp;\n              <input type=\"text\" name=\"priceForSettingPrice\" onChange={this.handleChange}/>\n              &nbsp;&nbsp;\n            </label>\n            <button onClick={this.handleSetPrice}>Set Price</button>\n          </div>\n          <div className=\"flex-child green\">\n            <br/>\n            <h2>Trading</h2>\n            <br/>\n            <label>\n              token id&nbsp;&nbsp;<input type=\"text\" name=\"tokenIdForBuying\" onChange={this.handleChange}/>\n            </label>\n            &nbsp;&nbsp;\n            <button onClick={this.handleBuy.bind(this)}>Buy Token</button>\n          </div>\n        </div>\n          \n        <div className=\"centered\">\n        <h2>Token status</h2>\n          <table border=\"1px solid black\" className=\"centered\">\n            <thead>\n              <tr>\n                <th>Token Id</th>\n                <th>Price</th>\n                <th>Owner</th>\n              </tr>\n            </thead>\n            <tbody>\n              {\n                this.state.items.map((item, index) => (\n                  <tr>\n                    <td>{item[0]}</td>\n                    <td>{item[1]}</td>\n                    <td>{item[2]}</td>\n                  </tr>\n                ))\n              }\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}